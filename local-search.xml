<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>自动化的博客发布工作流</title>
    <link href="/2024/01/12/My%20Blog%20Workflow/"/>
    <url>/2024/01/12/My%20Blog%20Workflow/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>23 年 10 月份，我开始使用 Obsidian 作为笔记工具，从此一发不可收拾。之前氪金支持的 Typora，现在已沦为 Markdown 本地预览器。我进一步发现，Obsidian 透明可定制的设计理念，使它可以与其他工具进行集成和协同，堪称是笔记届的 VSCode。经过 2 天左右的尝试，我就搞出了一套使用 Obsidian 撰写文章并自动发布到网站的工作流，整个过程门槛极低，并且有很不错的自定义空间（假设你非常熟悉前端技术）。现在把这套工具和流程分享给大家。</p><p>目前我使用的工具如下。</p><ul><li><a href="https://docs.github.com/en/pages/quickstart">GitHub Pages</a>: 免费的静态网站部署，大陆可访问</li><li><a href="https://hexo.io/">Hexo</a>: 一个基于 Nodejs 的静态网站生成器，文章使用 Markdown 作为源语言</li><li><a href="https://obsidian.md/">Obsidian</a>: 高度自定义的笔记工具，内容完全基于 Markdown 文件</li><li><a href="https://github.com/denolehov/obsidian-git">Obsidian-Git</a> 插件: 免费的云端备份和跨设备同步解决方案，基于 Git</li></ul><div class="note note-info">            <p>这里一共涉及了三个概念，分别是笔记工具 (编辑 Markdown)、静态网站生成器 (处理 Markdown)、网站部署服务。它们相互独立，分别可以用其他工具替换。本文主要展示我比较喜欢的这一组合。</p>          </div><p>借助这些工具，我们可以在 Obsidian 内随心编写内容，然后自动地将文章发布至网站，并且不会产生任何费用。经过前期的配置后，发布一篇博文真的就<strong>只需要三步</strong>：</p><ol><li>在 Obsidian 里新建文件，填入标题等信息，并在 Obsidian 内完成撰写</li><li>打开命令行执行 <code>hexo deploy -g</code></li><li>等待 GitHub Pages 部署完成，即可在网站上看到精美的文章</li></ol><p>接下来，我简要介绍一下我的配置过程。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>为了在机器上顺利运行 Hexo 和 Git 等命令行工具，需要提前做以下准备：</p><ol><li>Nodejs. 由于 Hexo 是基于 JavaScript 的工具，需要在自己的机器上安装 node 和 npm&#x2F;pnpm 等命令行工具，Windows 可使用 scoop&#x2F;winget (类似于 Ubuntu 中的 apt) 安装。</li><li>Git. 通过本地的 Git 命令行工具能够直接 pull&#x2F;push 远程仓库，避免手动上传下载。</li><li>GitHub &#x2F; Gitee 等平台账号。<ul><li>我使用 GitHub Pages 作为静态页面部署方案，</li><li>我使用 Gitee 私有仓来托管源码项目，它兼具云端备份和跨设备同步的功能，所以希望网络连接通畅一些，换成 GitHub 也是完全一样的。</li></ul></li></ol><h2 id="Hexo-项目配置"><a href="#Hexo-项目配置" class="headerlink" title="Hexo 项目配置"></a>Hexo 项目配置</h2><p>Hexo 是一个博客站框架，准确的来说，它是一个静态网站生成器，类似于 Jekyll。它负责将一个文件夹 (默认为 <code>source/_posts</code>) 下的所有 Markdown 文件转化为一个网站。关于 Hexo 的用法，可以查阅 <a href="https://hexo.io/docs/">文档</a>。</p><h3 id="创建网站"><a href="#创建网站" class="headerlink" title="创建网站"></a>创建网站</h3><p>首先 clone 官方提供的项目模板到本地。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/hexojs/hexo-starter blog<br></code></pre></td></tr></table></figure><p>进入该路径后，你将会看到：</p><ul><li><code>source/</code> 是存放网站源内容的目录，Hexo 不会修改该目录下的任何内容。准确地来说，该目录中的 Markdown 后缀文件会被 Hexo 识别并处理，其余文件将会照搬至网站文件中。<ul><li><code>source/_posts</code> 中的所有 Markdown 文件将被视作文章，在 Obsidian 中，我们在该文件下创建的笔记将被发布，否则不会被处理为文章。</li></ul></li><li><code>_config.yml</code> 是网站配置，可以根据 <a href="https://hexo.io/docs/configuration">文档</a> 来修改。</li><li><code>themes/</code> 是安装第三方主题的地方。</li><li><code>.gitignore</code> 指定 Git 不会追踪的文件。</li></ul><p>这个目录同时作为 Hexo 项目和 Obsidian Vault，我希望这个目录在我的所有设备之间同步，所以我希望 Git 不要追踪 Node 依赖、Hexo 部署产生的临时文件。这是我的 <code>.gitignore</code> 文件内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs gitignore"># Node<br>*.log<br>*.iml<br>node_modules/<br>package-lock.json<br>*.lock<br>pnpm-lock.yaml<br><br># Obsidian<br>.obsidian/workspace.json<br>.obsidian/workspace-mobile.json<br>.obsidian/community-plugins.json<br>.obsidian/plugins/<br><br># Hexo<br>db.json<br>public/<br>.deploy_git/<br></code></pre></td></tr></table></figure><p>在该目录下，使用你喜欢的包管理工具安装依赖，这样你就可以在这个目录下使用 Hexo 命令行工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pnpm install<br>npx hexo --version<br></code></pre></td></tr></table></figure><p>至此，你就可以随意使用 Hexo 了。例如你可以使用 <code>hexo generate</code> 来生成整个网站，或者直接使用 <code>hexo server</code> 来在本地浏览器查看网站。在本地查看过程中，你在 <code>source/_posts</code> 修改的文章内容都会立刻生效（浏览器刷新网页）。</p><h3 id="静态网站部署"><a href="#静态网站部署" class="headerlink" title="静态网站部署"></a>静态网站部署</h3><p>接下来，我们可以将 Hexo 生成的网站部署到网上，让其他人都可以看到。使用 GitHub Pages 部署静态网站非常简单，你只需要把网站内容上传到 <code>&lt;username&gt;.github.io</code> 这个仓库，就等同于部署到 <code>https://&lt;username&gt;.github.io</code> 这个网站。</p><p>插件 hexo-deployer-git 可以将上传的流程自动化。首先在该目录下安装 node 包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pnpm install hexo-deployer-git<br></code></pre></td></tr></table></figure><p>然后在 <code>_config.yml</code> 中填入以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span>  <br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>  <br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/&lt;username&gt;/&lt;username&gt;.github.io</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span><br></code></pre></td></tr></table></figure><p>这个意思是，告诉 Hexo 你的部署方式是通过 Git 上传到一个你指定的远程仓库。</p><p>前往 GitHub 官网创建一个名为 <code>&lt;username&gt;.github.io</code> 的公开仓库，并参考 <a href="https://docs.github.com/en/pages/quickstart">官方教程</a> 在仓库里设置 Pages 服务，然后你就可以使用 <code>hexo deploy</code> 命令自动上传。一旦你把网站内容传到 GitHub，GitHub Pages 会自动地部署你的内容。</p><h2 id="Obsidian-Vault-配置"><a href="#Obsidian-Vault-配置" class="headerlink" title="Obsidian Vault 配置"></a>Obsidian Vault 配置</h2><p>刚刚讲到，Hexo 本质上就是把 <code>source/_posts</code> 下的所有 Markdown 文件当做文章，并根据它们生成网站。这与 Obsidian 的使用理念高度统一，Obsidian 本质上就是帮助你编辑一个文件夹 (称为 Vault) 下的所有 Markdown 文件。</p><p>我们打开 Obsidian，点击 Open Folder as Vault 并选择我们刚刚创建的目录。这样，Obsidian 会在项目目录下创建一个名为 <code>.obsidian</code> 的文件夹，存放该 Vault 的设置、插件等信息，类似于 <code>.idea/</code> 和 <code>.vscode/</code>。没有特殊情况的话，该文件夹可以让 Git 追踪并同步，不过为了防止潜在的合并冲突，我推荐在 <code>.gitignore</code> 里忽略以下两项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gitignore">.obsidian/workspace.json<br>.obsidian/plugins/<br></code></pre></td></tr></table></figure><h3 id="文章模版"><a href="#文章模版" class="headerlink" title="文章模版"></a>文章模版</h3><p>在 Hexo 中，每个 Markdown 文件都需要通过 front-matter 来指定文章的元信息，一个典型的 front-matter 是这个样子的。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">&quot;文章标题&quot;</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2024-01-11 11:22:56</span><br><span class="hljs-attr">updated:</span> <span class="hljs-number">2024-01-11 11:22:56</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">文章</span><br><span class="hljs-attr">tags:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">test</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>这些内容会被 Hexo 解析，用于生成网站。完整的设置字段请查阅 <a href="https://hexo.io/docs/front-matter">官方文档</a>。</p><p>也就是说，我们在 Obsidian 中每创建一篇新文章，都需要在最开头附上一段这样的信息。为了节省操作，我推荐使用模版插件来自动生成这样的内容。</p><p>在 Obsidian 设置界面里的 Community Plugins 中搜索 “Templater”，并安装该插件。然后在项目目录下创建一个名为 <code>templater</code> 的空文件夹，并在插件设置中指定该路径为模版文件夹。在 <code>templater</code> 中创建一个新文件（随便起名字），填入以下内容并按需修改。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;&lt;% tp.file.title %&gt;&#x27;</span><br><span class="hljs-attr">date:</span> &lt;%<span class="language-ruby"> tp.date.now(<span class="hljs-string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>) </span>%&gt;<br><span class="hljs-attr">updated:</span> &lt;%<span class="language-ruby"> tp.date.now(<span class="hljs-string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>) </span>%&gt;<br><span class="hljs-attr">categories:</span>  <br><span class="hljs-attr">tags:</span>  <br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>之后，你在任何新笔记中按下 <code>Alt+E</code> 快捷键，就可以得到所需的 front-matter。类似下面这样<br><img src="/attachments/20240112145528.png"></p><p>Obsidian 也是非常给力，这样的 UI 极大增强了可读性，并方便我们编辑相应内容。</p><h3 id="无缝备份-同步"><a href="#无缝备份-同步" class="headerlink" title="无缝备份 &amp; 同步"></a>无缝备份 &amp; 同步</h3><p>我希望我能在任何设备上都能编辑并发布文章，这就需要让这整个项目跨设备同步，这样不管我修改 Hexo 设置，还是添加新文章内容，都没有任何阻碍。下面我介绍我的方案，完全免费。</p><p>在文章的最开始，我们其实就 clone 了一个 Git 仓。这个 Git 仓既追踪 Hexo 项目文件，也追踪了所有 Markdown 源文件。那么我们完全可以借助 Git 来管理目录下一切所需的东西。</p><p>首先，前往 Gitee 创建一个私有仓库，名字无所谓。这个仓库负责托管我们整个项目。</p><p>在项目目录下使用以下命令添加我们刚刚远程仓库（必须是 Obsidian Vault 的根目录，否则自动同步插件不能工作）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin https://gitee.com/me/repo_name.git<br></code></pre></td></tr></table></figure><p>先手动确认一下 push 没有问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;message&quot;</span><br>git push --set-upstream origin master<br></code></pre></td></tr></table></figure><p>以上过程如果要求你在命令行输密码，就不是很方便，我推荐使用 ssh key 或 Git Credential Manager 等方案，这样之后使用插件自动同步就省心了。</p><div class="note note-info">            <p>Tips<br>可以使用 <code>git config commit.gpgsign false</code> 来取消 commit 签名，反正这个项目只在私有仓里备份，并不对其他人可见。</p>          </div><p>确认 Git 可以进行 push&#x2F;pull 操作后，我们使用插件来把同步全自动化。前往 Obsidian 搜索插件 “Obsidian-git” 并安装。</p><ul><li>如果你希望手动同步，那么用快捷键唤起 command palette 后输入 “git” 就可以快速执行各种 git 操作。其中，”Obsidian Git: Create Backup” 命令会保存所有修改、创建 commit、push 到远程仓库，非常实用。</li><li>如果希望自动同步，可以在插件设置中开启 “Auto backup after stopping file edits” 并设置你喜欢的 “Vault backup interval”。</li><li>此外，”Pull updates on startup”, “Push on backup”, 和 “Pull changes before push” 都是很实用的，推荐开启。</li></ul><p>至此，我们先前配置 Hexo 项目、Obsidian Vault 都可以进行自动备份和跨设备同步了。到了新的设备上，我们只需要准备好 nodejs, git, 以及 Obsidian，就不需要再进行配置了，非常方便。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>我使用了三个非常 amazing 的工具来帮我自动化发布网站：</p><ul><li>Hexo 可以把一个目录下的所有 Markdown 文件转化为网站文章</li><li>GitHub Pages 可以免费部署静态网站</li><li>Obsidian 提供了完美的撰写体验</li></ul><p>创建新文章并发布的工作流如下：</p><ol><li>打开 Obsidian，在 <code>source/_posts</code> 下创建新笔记</li><li>填写文章标题</li><li>按下快捷键，插入 front-matter 模版，然后按需编辑</li><li>撰写内容，使用 Markdown 书写</li><li>打开命令行，输入 <code>hexo s</code> 预览效果</li><li>打开命令行，输入 <code>hexo deploy -g</code> 发布</li><li>稍等片刻，即可在 <code>https://&lt;username&gt;.github.io</code> 看到新文章~</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>obsidian</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/01/11/hello-world/"/>
    <url>/2024/01/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试样式</title>
    <link href="/2024/01/11/Test/"/>
    <url>/2024/01/11/Test/</url>
    
    <content type="html"><![CDATA[<h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><p>Here is a PyTorch implementation of Supervised Contrastive Loss, which is propose by Khosla et al.<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Supervised Contrastive Learning. [https://arxiv.org/abs/2004.11362](https://arxiv.org/abs/2004.11362)">[1]</span></a></sup>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Author: Yonglong Tian (yonglong@mit.edu)</span><br><span class="hljs-string">Date: May 07, 2020</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SupConLoss</span>(nn.Module):<br>    <span class="hljs-string">&quot;&quot;&quot;Supervised Contrastive Learning: https://arxiv.org/pdf/2004.11362.pdf.</span><br><span class="hljs-string">    It also supports the unsupervised contrastive loss in SimCLR&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, temperature=<span class="hljs-number">0.07</span>, contrast_mode=<span class="hljs-string">&#x27;all&#x27;</span>,</span><br><span class="hljs-params">                 base_temperature=<span class="hljs-number">0.07</span></span>):<br>        <span class="hljs-built_in">super</span>(SupConLoss, self).__init__()<br>        self.temperature = temperature<br>        self.contrast_mode = contrast_mode<br>        self.base_temperature = base_temperature<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, features, labels=<span class="hljs-literal">None</span>, mask=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Compute loss for model. If both `labels` and `mask` are None,</span><br><span class="hljs-string">        it degenerates to SimCLR unsupervised loss:</span><br><span class="hljs-string">        https://arxiv.org/pdf/2002.05709.pdf</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            features: hidden vector of shape [bsz, n_views, ...].</span><br><span class="hljs-string">            labels: ground truth of shape [bsz].</span><br><span class="hljs-string">            mask: contrastive mask of shape [bsz, bsz], mask_&#123;i,j&#125;=1 if sample j</span><br><span class="hljs-string">                has the same class as sample i. Can be asymmetric.</span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            A loss scalar.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        device = (torch.device(<span class="hljs-string">&#x27;cuda&#x27;</span>)<br>                  <span class="hljs-keyword">if</span> features.is_cuda<br>                  <span class="hljs-keyword">else</span> torch.device(<span class="hljs-string">&#x27;cpu&#x27;</span>))<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(features.shape) &lt; <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;`features` needs to be [bsz, n_views, ...],&#x27;</span><br>                             <span class="hljs-string">&#x27;at least 3 dimensions are required&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(features.shape) &gt; <span class="hljs-number">3</span>:<br>            features = features.view(features.shape[<span class="hljs-number">0</span>], features.shape[<span class="hljs-number">1</span>], -<span class="hljs-number">1</span>)<br><br>        batch_size = features.shape[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> labels <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> mask <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;Cannot define both `labels` and `mask`&#x27;</span>)<br>        <span class="hljs-keyword">elif</span> labels <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> mask <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            mask = torch.eye(batch_size, dtype=torch.float32).to(device)<br>        <span class="hljs-keyword">elif</span> labels <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            labels = labels.contiguous().view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> labels.shape[<span class="hljs-number">0</span>] != batch_size:<br>                <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;Num of labels does not match num of features&#x27;</span>)<br>            mask = torch.eq(labels, labels.T).<span class="hljs-built_in">float</span>().to(device)<br>        <span class="hljs-keyword">else</span>:<br>            mask = mask.<span class="hljs-built_in">float</span>().to(device)<br><br>        contrast_count = features.shape[<span class="hljs-number">1</span>]<br>        contrast_feature = torch.cat(torch.unbind(features, dim=<span class="hljs-number">1</span>), dim=<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">if</span> self.contrast_mode == <span class="hljs-string">&#x27;one&#x27;</span>:<br>            anchor_feature = features[:, <span class="hljs-number">0</span>]<br>            anchor_count = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> self.contrast_mode == <span class="hljs-string">&#x27;all&#x27;</span>:<br>            anchor_feature = contrast_feature<br>            anchor_count = contrast_count<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;Unknown mode: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.contrast_mode))<br><br>        <span class="hljs-comment"># compute logits</span><br>        anchor_dot_contrast = torch.div(<br>            torch.matmul(anchor_feature, contrast_feature.T),<br>            self.temperature)<br>        <span class="hljs-comment"># for numerical stability</span><br>        logits_max, _ = torch.<span class="hljs-built_in">max</span>(anchor_dot_contrast, dim=<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>)<br>        logits = anchor_dot_contrast - logits_max.detach()<br><br>        <span class="hljs-comment"># tile mask</span><br>        mask = mask.repeat(anchor_count, contrast_count)<br>        <span class="hljs-comment"># mask-out self-contrast cases</span><br>        logits_mask = torch.scatter(<br>            torch.ones_like(mask),<br>            <span class="hljs-number">1</span>,<br>            torch.arange(batch_size * anchor_count).view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>).to(device),<br>            <span class="hljs-number">0</span><br>        )<br>        mask = mask * logits_mask<br><br>        <span class="hljs-comment"># compute log_prob</span><br>        exp_logits = torch.exp(logits) * logits_mask<br>        log_prob = logits - torch.log(exp_logits.<span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>))<br><br>        <span class="hljs-comment"># compute mean of log-likelihood over positive</span><br>        <span class="hljs-comment"># modified to handle edge cases when there is no positive pair</span><br>        <span class="hljs-comment"># for an anchor point. </span><br>        <span class="hljs-comment"># Edge case e.g.:- </span><br>        <span class="hljs-comment"># features of shape: [4,1,...]</span><br>        <span class="hljs-comment"># labels:            [0,1,1,2]</span><br>        <span class="hljs-comment"># loss before mean:  [nan, ..., ..., nan] </span><br>        mask_pos_pairs = mask.<span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>)<br>        mask_pos_pairs = torch.where(mask_pos_pairs &lt; <span class="hljs-number">1e-6</span>, <span class="hljs-number">1</span>, mask_pos_pairs)<br>        mean_log_prob_pos = (mask * log_prob).<span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>) / mask_pos_pairs<br><br>        <span class="hljs-comment"># loss</span><br>        loss = - (self.temperature / self.base_temperature) * mean_log_prob_pos<br>        loss = loss.view(anchor_count, batch_size).mean()<br><br>        <span class="hljs-keyword">return</span> loss<br></code></pre></td></tr></table></figure><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Supervised Contrastive Learning. <a href="https://arxiv.org/abs/2004.11362">https://arxiv.org/abs/2004.11362</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
